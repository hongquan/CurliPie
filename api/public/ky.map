{"version":3,"sources":["jsdelivr-header.js","/npm/ky@0.27.0/index.js"],"names":[],"mappings":"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","file":"/npm/ky@0.27.0/index.js","sourceRoot":"","sourcesContent":["/**\n * Minified by jsDelivr using Terser v5.3.5.\n * Original file: /npm/ky@0.27.0/index.js\n *\n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\n","/*! MIT License Â© Sindre Sorhus */\n\nconst isObject = value => value !== null && typeof value === 'object';\nconst supportsAbortController = typeof globalThis.AbortController === 'function';\nconst supportsStreams = typeof globalThis.ReadableStream === 'function';\nconst supportsFormData = typeof globalThis.FormData === 'function';\n\nconst mergeHeaders = (source1, source2) => {\n\tconst result = new globalThis.Headers(source1 || {});\n\tconst isHeadersInstance = source2 instanceof globalThis.Headers;\n\tconst source = new globalThis.Headers(source2 || {});\n\n\tfor (const [key, value] of source) {\n\t\tif ((isHeadersInstance && value === 'undefined') || value === undefined) {\n\t\t\tresult.delete(key);\n\t\t} else {\n\t\t\tresult.set(key, value);\n\t\t}\n\t}\n\n\treturn result;\n};\n\nconst deepMerge = (...sources) => {\n\tlet returnValue = {};\n\tlet headers = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!(Array.isArray(returnValue))) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && (key in returnValue)) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\n\t\t\tif (isObject(source.headers)) {\n\t\t\t\theaders = mergeHeaders(headers, source.headers);\n\t\t\t}\n\t\t}\n\n\t\treturnValue.headers = headers;\n\t}\n\n\treturn returnValue;\n};\n\nconst requestMethods = [\n\t'get',\n\t'post',\n\t'put',\n\t'patch',\n\t'head',\n\t'delete'\n];\n\nconst responseTypes = {\n\tjson: 'application/json',\n\ttext: 'text/*',\n\tformData: 'multipart/form-data',\n\tarrayBuffer: '*/*',\n\tblob: '*/*'\n};\n\nconst retryMethods = [\n\t'get',\n\t'put',\n\t'head',\n\t'delete',\n\t'options',\n\t'trace'\n];\n\nconst retryStatusCodes = [\n\t408,\n\t413,\n\t429,\n\t500,\n\t502,\n\t503,\n\t504\n];\n\nconst retryAfterStatusCodes = [\n\t413,\n\t429,\n\t503\n];\n\nconst stop = Symbol('stop');\n\nclass HTTPError extends Error {\n\tconstructor(response, request, options) {\n\t\t// Set the message to the status text, such as Unauthorized,\n\t\t// with some fallbacks. This message should never be undefined.\n\t\tsuper(\n\t\t\tresponse.statusText ||\n\t\t\tString(\n\t\t\t\t(response.status === 0 || response.status) ?\n\t\t\t\t\tresponse.status : 'Unknown response error'\n\t\t\t)\n\t\t);\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t\tthis.request = request;\n\t\tthis.options = options;\n\t}\n}\n\nclass TimeoutError extends Error {\n\tconstructor(request) {\n\t\tsuper('Request timed out');\n\t\tthis.name = 'TimeoutError';\n\t\tthis.request = request;\n\t}\n}\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// `Promise.race()` workaround (#91)\nconst timeout = (request, abortController, options) =>\n\tnew Promise((resolve, reject) => {\n\t\tconst timeoutID = setTimeout(() => {\n\t\t\tif (abortController) {\n\t\t\t\tabortController.abort();\n\t\t\t}\n\n\t\t\treject(new TimeoutError(request));\n\t\t}, options.timeout);\n\n\t\t/* eslint-disable promise/prefer-await-to-then */\n\t\toptions.fetch(request)\n\t\t\t.then(resolve)\n\t\t\t.catch(reject)\n\t\t\t.then(() => {\n\t\t\t\tclearTimeout(timeoutID);\n\t\t\t});\n\t\t/* eslint-enable promise/prefer-await-to-then */\n\t});\n\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\n\nconst defaultRetryOptions = {\n\tlimit: 2,\n\tmethods: retryMethods,\n\tstatusCodes: retryStatusCodes,\n\tafterStatusCodes: retryAfterStatusCodes\n};\n\nconst normalizeRetryOptions = (retry = {}) => {\n\tif (typeof retry === 'number') {\n\t\treturn {\n\t\t\t...defaultRetryOptions,\n\t\t\tlimit: retry\n\t\t};\n\t}\n\n\tif (retry.methods && !Array.isArray(retry.methods)) {\n\t\tthrow new Error('retry.methods must be an array');\n\t}\n\n\tif (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n\t\tthrow new Error('retry.statusCodes must be an array');\n\t}\n\n\treturn {\n\t\t...defaultRetryOptions,\n\t\t...retry,\n\t\tafterStatusCodes: retryAfterStatusCodes\n\t};\n};\n\n// The maximum value of a 32bit int (see issue #117)\nconst maxSafeTimeout = 2147483647;\n\nclass Ky {\n\tconstructor(input, options = {}) {\n\t\tthis._retryCount = 0;\n\t\tthis._input = input;\n\t\tthis._options = {\n\t\t\t// TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tcredentials: this._input.credentials || 'same-origin',\n\t\t\t...options,\n\t\t\theaders: mergeHeaders(this._input.headers, options.headers),\n\t\t\thooks: deepMerge({\n\t\t\t\tbeforeRequest: [],\n\t\t\t\tbeforeRetry: [],\n\t\t\t\tafterResponse: []\n\t\t\t}, options.hooks),\n\t\t\tmethod: normalizeRequestMethod(options.method || this._input.method),\n\t\t\tprefixUrl: String(options.prefixUrl || ''),\n\t\t\tretry: normalizeRetryOptions(options.retry),\n\t\t\tthrowHttpErrors: options.throwHttpErrors !== false,\n\t\t\ttimeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n\t\t\tfetch: options.fetch || globalThis.fetch.bind(globalThis)\n\t\t};\n\n\t\tif (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n\t\t\tthrow new TypeError('`input` must be a string, URL, or Request');\n\t\t}\n\n\t\tif (this._options.prefixUrl && typeof this._input === 'string') {\n\t\t\tif (this._input.startsWith('/')) {\n\t\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t\t}\n\n\t\t\tif (!this._options.prefixUrl.endsWith('/')) {\n\t\t\t\tthis._options.prefixUrl += '/';\n\t\t\t}\n\n\t\t\tthis._input = this._options.prefixUrl + this._input;\n\t\t}\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new globalThis.AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController.abort();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._options.signal = this.abortController.signal;\n\t\t}\n\n\t\tthis.request = new globalThis.Request(this._input, this._options);\n\n\t\tif (this._options.searchParams) {\n\t\t\tconst textSearchParams = typeof this._options.searchParams === 'string' ?\n\t\t\t\tthis._options.searchParams.replace(/^\\?/, '') :\n\t\t\t\tnew URLSearchParams(this._options.searchParams).toString();\n\t\t\tconst searchParams = '?' + textSearchParams;\n\t\t\tconst url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams);\n\n\t\t\t// To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\t\t\tif (((supportsFormData && this._options.body instanceof globalThis.FormData) || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n\t\t\t\tthis.request.headers.delete('content-type');\n\t\t\t}\n\n\t\t\tthis.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options);\n\t\t}\n\n\t\tif (this._options.json !== undefined) {\n\t\t\tthis._options.body = JSON.stringify(this._options.json);\n\t\t\tthis.request.headers.set('content-type', 'application/json');\n\t\t\tthis.request = new globalThis.Request(this.request, {body: this._options.body});\n\t\t}\n\n\t\tconst fn = async () => {\n\t\t\tif (this._options.timeout > maxSafeTimeout) {\n\t\t\t\tthrow new RangeError(`The \\`timeout\\` option cannot be greater than ${maxSafeTimeout}`);\n\t\t\t}\n\n\t\t\tawait delay(1);\n\t\t\tlet response = await this._fetch();\n\n\t\t\tfor (const hook of this._options.hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(\n\t\t\t\t\tthis.request,\n\t\t\t\t\tthis._options,\n\t\t\t\t\tthis._decorateResponse(response.clone())\n\t\t\t\t);\n\n\t\t\t\tif (modifiedResponse instanceof globalThis.Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._decorateResponse(response);\n\n\t\t\tif (!response.ok && this._options.throwHttpErrors) {\n\t\t\t\tthrow new HTTPError(response, this.request, this._options);\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this._options.onDownloadProgress) {\n\t\t\t\tif (typeof this._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn this._stream(response.clone(), this._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = this._options.retry.methods.includes(this.request.method.toLowerCase());\n\t\tconst result = isRetriableMethod ? this._retry(fn) : fn();\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes)) {\n\t\t\tresult[type] = async () => {\n\t\t\t\tthis.request.headers.set('accept', this.request.headers.get('accept') || mimeType);\n\n\t\t\t\tconst response = (await result).clone();\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tif (response.status === 204) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options.parseJson) {\n\t\t\t\t\t\treturn options.parseJson(await response.text());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn response[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t_calculateRetryDelay(error) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!this._options.retry.statusCodes.includes(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t_decorateResponse(response) {\n\t\tif (this._options.parseJson) {\n\t\t\tresponse.json = async () => {\n\t\t\t\treturn this._options.parseJson(await response.text());\n\t\t\t};\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tasync _retry(fn) {\n\t\ttry {\n\t\t\treturn await fn();\n\t\t} catch (error) {\n\t\t\tconst ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms);\n\n\t\t\t\tfor (const hook of this._options.hooks.beforeRetry) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst hookResult = await hook({\n\t\t\t\t\t\trequest: this.request,\n\t\t\t\t\t\toptions: this._options,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tretryCount: this._retryCount\n\t\t\t\t\t});\n\n\t\t\t\t\t// If `stop` is returned from the hook, the retry process is stopped\n\t\t\t\t\tif (hookResult === stop) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this._retry(fn);\n\t\t\t}\n\n\t\t\tif (this._options.throwHttpErrors) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync _fetch() {\n\t\tfor (const hook of this._options.hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await hook(this.request, this._options);\n\n\t\t\tif (result instanceof Request) {\n\t\t\t\tthis.request = result;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (result instanceof Response) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.timeout === false) {\n\t\t\treturn this._options.fetch(this.request.clone());\n\t\t}\n\n\t\treturn timeout(this.request.clone(), this.abortController, this._options);\n\t}\n\n\t/* istanbul ignore next */\n\t_stream(response, onDownloadProgress) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\treturn new globalThis.Response(\n\t\t\tnew globalThis.ReadableStream({\n\t\t\t\tasync start(controller) {\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tawait read();\n\t\t\t\t\t}\n\n\t\t\t\t\tawait read();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n\nconst validateAndMerge = (...sources) => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nconst createInstance = defaults => {\n\tconst ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));\n\n\tfor (const method of requestMethods) {\n\t\tky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {method}));\n\t}\n\n\tky.HTTPError = HTTPError;\n\tky.TimeoutError = TimeoutError;\n\tky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n\tky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n\tky.stop = stop;\n\n\treturn ky;\n};\n\nconst ky = createInstance();\n\nexport default ky;\n"]}